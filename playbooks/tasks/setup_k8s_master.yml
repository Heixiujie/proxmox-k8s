---
- hosts: k8s_master_node
  remote_user: root

  tasks:
    #- name: Remove swap from fstab  
    #  lineinfile: path=/etc/fstab regexp='swap' state=absent

    #- name: Disable swap
    #  shell: swapoff -a
    #  ignore_errors: yes

    - name: Restart containerd
      shell: |
        mv /etc/containerd/config.toml /etc/containerd/config.toml.bak
        systemctl restart containerd

    - name: Check if kubeadm has already run
      stat: 
        path: "/etc/kubernetes/pki/ca.key"
      register: kubeadm_ca

    - name: Configure docker daemon
      shell: |
        echo '
        apiServer:
          certSANs:
          - "{{k8s_cert_san1}}"
          extraArgs:
            authorization-mode: Node,RBAC
          timeoutForControlPlane: 4m0s
        apiVersion: kubeadm.k8s.io/v1beta2
        certificatesDir: /etc/kubernetes/pki
        clusterName: {{ k8s_cluster_name }}
        controllerManager: {}
        dns:
          type: CoreDNS
        etcd:
          local:
            dataDir: /var/lib/etcd
        imageRepository: registry.aliyuncs.com/google_containers
        kind: ClusterConfiguration
        kubernetesVersion: v1.19.0
        networking:
          dnsDomain: {{ dns_domain }}
          podSubnet: {{ pod_network }}
          serviceSubnet: 10.96.0.0/12
        scheduler: {}
        ---
        kind: KubeletConfiguration
        apiVersion: kubelet.config.k8s.io/v1beta1
        cgroupDriver: systemd
        ' > /root/kubeadm.yml

    #shell: kubeadm init {{ pod_network }} {{apiserver_advertise_address}} {{dns_domain}} {{preflight_options}}
    #shell: kubeadm init --config /root/kubeadm.yaml {{apiserver_advertise_address}} {{preflight_options}}
    - name: Start cluster on master 
      shell: kubeadm init --config /root/kubeadm.yml {{ preflight_options }}
      when: not kubeadm_ca.stat.exists

    - name: Make kube directory
      shell: mkdir -p /root/.kube

    - name: Copy config file 
      shell: cp /etc/kubernetes/admin.conf /root/.kube/config

    - name: Change ownership of kube directory 
      shell: chown -R root:root /root/.kube 

    - name: Test if nodes are found 
      shell: kubectl get nodes 
      register: result 

    - debug: msg="{{ result.stdout }}"

    - name: Generate join command 
      shell: kubeadm token create --print-join-command 
      register: join_command
    
    - name: Copy join command to local file
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./file/join_command.txt"

    - name: Create a local ~/.kube directory on local workstation
      local_action:
        module: file
        path: ~/.kube
        state: directory

    - name: Fetch k8s_config
      shell: cat ~/.kube/config
      register: k8s_config

    - name: Copying .kube/config to local
      local_action: copy content={{ k8s_config.stdout }} dest=~/.kube/config
